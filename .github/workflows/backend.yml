name: backend

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  test:
    env:
      NODE_ENV: test
      DB_USER: ${{ secrets.POSTGRES_USER }}
      DB_PASS: ${{ secrets.POSTGRES_PASSWORD }}
      DB_NAME: ${{ secrets.POSTGRES_DB }}
      DB_PORT: 5432

    name: Test API en Node.js ${{ matrix.node }}
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        ports:
          - 5434:5432
        env:
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        options: >-
          --health-cmd="pg_isready -U $POSTGRES_USER -d $POSTGRES_DB"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    strategy:
      matrix:
        node: [22.x]

    steps:
      - name: Checkout del cÃ³digo
        uses: actions/checkout@v3

      - name: Configurar Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}

      - name: Debug env vars
        run: |
          echo "DB_HOST=postgres"
          echo "DB_USER=$DB_USER"
          echo "DB_NAME=$DB_NAME"

      - name: Esperar a que Postgres estÃ© listo
        run: |
          for i in {1..10}; do
            PGPASSWORD=$DB_PASS psql -h postgres -p $DB_PORT -U $DB_USER -d postgres -c "SELECT 1;" && break
            echo "Postgres no estÃ¡ listo aÃºn... reintentando en 3s"
            sleep 3
          done

      - name: Crear base de datos para tests
        run: |
          PGPASSWORD=$DB_PASS psql \
            -h $DB_HOST \
            -p $DB_PORT \
            -U $DB_USER \
            -d postgres \
            -c "CREATE DATABASE $DB_NAME;"
        env:
          DB_HOST: postgres   # ðŸ‘ˆ fuerza a usar el servicio del contenedor
          DB_USER: ${{ secrets.POSTGRES_USER }}
          DB_PASS: ${{ secrets.POSTGRES_PASSWORD }}
          DB_NAME: ${{ secrets.POSTGRES_DB }}
          DB_PORT: 5432

      - name: Cachear dependencias npm
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Instalar dependencias
        run: npm ci

      - name: Ejecutar tests unitarios
        run: npm run test:unit
        env:
          DB_HOST: postgres   # ðŸ‘ˆ asegura que no use los secrets de Neon

      - name: Ejecutar tests de integraciÃ³n
        run: npm run test:integration
        env:
          DB_HOST: postgres   # ðŸ‘ˆ idem arriba

      - name: Reportar Ã©xito
        if: success()
        run: echo "API funcional en Node ${{ matrix.node }} (unitarios e integraciÃ³n OK)"

      - name: Reportar error
        if: failure()
        run: echo "Falla detectada en los tests para Node ${{ matrix.node }}"

  deploy:
    needs: test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Deploy to Railway
        uses: railway/cli-action@v2
        with:
          railway_token: ${{ secrets.RAILWAY_TOKEN }}
